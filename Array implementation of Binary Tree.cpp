#include <iostream>#include <cmath>using namespace std;class BinaryTreeArray{    public:    int* arr;    int capacity;    int size;    BinaryTreeArray(int cap)    {        capacity=cap;        arr=new int[capacity];        size=0;        for(int i=0;i<capacity;i++)        arr[i]=-1;    }void insert(int value)    {        if(size==capacity)        {            cout<<"tree is full"<<endl;            return;        }        arr[size]=value;        size++;            }    int search(int value)    {        for(int i=0;i<size;i++)        {            if(arr[i]==value)            return i;        }        return -1;    }void deleteNode(int value){        int index=search(value);        if(index==-1)        {            cout<<"element not found"<<endl;            return;        }        arr[index]=arr[size-1];        arr[size-1]=-1;        size--;    }    void inorder(int index)    {        if(index>=size||arr[index]==-1)        return;        inorder(2*index+1);        cout<<arr[index]<<" ";        inorder(2*index+2);            }    void display()    {        for(int i=0;i<capacity;i++)        {            if(arr[i]!=-1)            cout<<arr[i]<<" ";            else            cout<<"_";        }        cout<<endl;    }};int main(){  BinaryTreeArray tree(15);  tree.insert(10);  tree.insert(20);  tree.insert(30);  tree.insert(40);  tree.insert(50);  tree.insert(60);  tree.insert(70);  cout<<"binary tree array : ";  tree.display();  cout<<"inorder traversal: ";  tree.inorder(0);  cout<<endl;  int res=tree.search(30);  if(res==-1)  cout<<"not found"<<endl;  else  cout<<res<<endl;  tree.deleteNode(30);  tree.display();        return 0;}